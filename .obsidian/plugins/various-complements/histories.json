{"![[pen.jpeg]]":{"![[pen.jpeg]]":{"frontMatter":{"count":2,"lastUpdated":1692625352468}}},"Pool是在运行时常量池中，属于永久代，za":{"Pool是在运行时常量池中，属于永久代，za":{"currentFile":{"count":3,"lastUpdated":1691359850414}}},"final":{"final":{"currentFile":{"count":1,"lastUpdated":1691361577445}}},"变量，基本类型，数值不变，引用类型，不能再指向其他对象，对象本身是可以修改的":{"变量，基本类型，数值不变，引用类型，不能再指向其他对象，对象本身是可以修改的":{"currentFile":{"count":1,"lastUpdated":1691361597163}}},"ArrayList":{"ArrayList":{"currentFile":{"count":1,"lastUpdated":1691367128693}}},"Concurrent并发包下的CopyOnWriteArrayList":{"Concurrent并发包下的CopyOnWriteArrayList":{"currentFile":{"count":1,"lastUpdated":1691368355072}}},"HashMap存取：":{"HashMap存取：":{"currentFile":{"count":1,"lastUpdated":1691368797056}}},"jdk1.8":{"jdk1.8":{"currentFile":{"count":1,"lastUpdated":1691396177737}}},"jdk1.7开始，字符串常量池，静态变量移除出永久代，保存在堆中。使用":{"jdk1.7开始，字符串常量池，静态变量移除出永久代，保存在堆中。使用":{"currentFile":{"count":1,"lastUpdated":1691440144138}}},"主内存与工作内存":{"主内存与工作内存":{"internalLink":{"count":1,"lastUpdated":1691440477499}}},"TERMINATED":{"TERMINATED":{"currentFile":{"count":1,"lastUpdated":1691488758665}}},"Java内存区域和内存模型（JMM）":{"Java内存区域和内存模型（JMM）":{"internalLink":{"count":1,"lastUpdated":1691495852427}}},"都存在私有数据区域和共享数据区域。一般来说，JMM中的主内存属于共享数据区域，他是包含了堆和方法区；同样，JMM中的本地内存属于私有数据区域，包含了程序计数器、本地方法栈、虚拟机栈。":{"都存在私有数据区域和共享数据区域。一般来说，JMM中的主内存属于共享数据区域，他是包含了堆和方法区；同样，JMM中的本地内存属于私有数据区域，包含了程序计数器、本地方法栈、虚拟机栈。":{"currentFile":{"count":1,"lastUpdated":1691503076451}}},"volatile":{"volatile":{"currentFile":{"count":2,"lastUpdated":1691524369970}}},"偏向锁状态":{"偏向锁状态":{"currentFile":{"count":1,"lastUpdated":1691521680467}}},"CAS算法":{"CAS算法":{"currentFile":{"count":1,"lastUpdated":1691522597930}}},"方法就可以了，在下文会有详细的介绍":{"方法就可以了，在下文会有详细的介绍":{"currentFile":{"count":1,"lastUpdated":1691526382431}}},"冯诺依曼计算机模型的五大核心组成部分：":{"冯诺依曼计算机模型的五大核心组成部分：":{"currentFile":{"count":1,"lastUpdated":1691626303537}}},"多核CPU架构":{"多核CPU架构":{"currentFile":{"count":1,"lastUpdated":1691628494743}}},"ClassLoader":{"ClassLoader":{"currentFile":{"count":3,"lastUpdated":1692131780526}}},"java.lang.String":{"java.lang.String":{"currentFile":{"count":1,"lastUpdated":1692131887516}}},"进行初始化，当目标类被初始化以后，就可以在":{"进行初始化，当目标类被初始化以后，就可以在":{"currentFile":{"count":1,"lastUpdated":1692136854931}}},"public":{"public":{"currentFile":{"count":1,"lastUpdated":1692215622608}}},"1都无环，2其中一个有环另一个无环，都有环":{"1都无环，2其中一个有环另一个无环，都有环":{"currentFile":{"count":1,"lastUpdated":1692319909902}}},"用到两个Stack":{"用到两个Stack":{"currentFile":{"count":1,"lastUpdated":1692332984742}}},"树的最大宽度":{"树的最大宽度":{"currentFile":{"count":1,"lastUpdated":1692375939267}}},"搜索二叉树":{"搜索二叉树":{"currentFile":{"count":1,"lastUpdated":1692386938091}}},"左右子树给你的信息，就是它们动态规划所出来的结果，你怎么加工出你自己的动态规划的信息网上给，整个过程就是树型DP，树型DP是面试中最难的题目，没有更难的了，":{"左右子树给你的信息，就是它们动态规划所出来的结果，你怎么加工出你自己的动态规划的信息网上给，整个过程就是树型DP，树型DP是面试中最难的题目，没有更难的了，":{"currentFile":{"count":2,"lastUpdated":1692388558202}}},"ServerSocketChannel":{"ServerSocketChannel":{"currentFile":{"count":1,"lastUpdated":1692638390162}}},"NIO":{"NIO":{"frontMatter":{"count":1,"lastUpdated":1692647629614}}},"Netty":{"Netty":{"frontMatter":{"count":1,"lastUpdated":1692647640541}}},"JVM基础——马士兵":{"JVM基础——马士兵":{"internalLink":{"count":1,"lastUpdated":1692648289010}}},"Java基础知识":{"Java基础知识":{"internalLink":{"count":1,"lastUpdated":1692648365729}}},"设计模式":{"设计模式":{"frontMatter":{"count":1,"lastUpdated":1692737948870}}},"是一个容器，因为它包含并且管理应用对象的生命周期":{"是一个容器，因为它包含并且管理应用对象的生命周期":{"currentFile":{"count":1,"lastUpdated":1693902585109}}},"中可以使用XML和Java注解组合这些对象。":{"中可以使用XML和Java注解组合这些对象。":{"currentFile":{"count":1,"lastUpdated":1693902591062}}},"singleton：在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值":{"singleton：在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值":{"currentFile":{"count":1,"lastUpdated":1693967311362}}},"Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境":{"Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境":{"currentFile":{"count":1,"lastUpdated":1693967358426}}},"一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境":{"一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境":{"currentFile":{"count":1,"lastUpdated":1693967371160}}},"依赖注入与容器本身耦合":{"依赖注入与容器本身耦合":{"currentFile":{"count":1,"lastUpdated":1694009954110}}},"能够被单独实例化并且你也能为它提供它所需的依赖。":{"能够被单独实例化并且你也能为它提供它所需的依赖。":{"currentFile":{"count":1,"lastUpdated":1694009984071}}},"，则注入失败时不会抛出异常":{"，则注入失败时不会抛出异常":{"currentFile":{"count":1,"lastUpdated":1694011640895}}},"AOP（面向切面编程）的支持，可以在":{"AOP（面向切面编程）的支持，可以在":{"currentFile":{"count":1,"lastUpdated":1694013088257}}},"面向切面编程，通过预编译或运行期动态代理实现程序功能的统一维护的一种技术":{"面向切面编程，通过预编译或运行期动态代理实现程序功能的统一维护的一种技术":{"currentFile":{"count":1,"lastUpdated":1694014242123}}},"AOP的实现方式":{"AOP的实现方式":{"currentFile":{"count":1,"lastUpdated":1694014268867}}}}